{"category":"LED_UTILS","color":"#24ff50","blocks":["__LED_UTILS_init_led_utils","__LED_UTILS_show_led_float_1","__LED_UTILS_show_led_int"],"jscode":"// Block __LED_UTILS_init_led_utils\nvar __LED_UTILS_init_led_utils_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"init_led_utils\"\n        }\n    ],\n    \"colour\": \"#24ff50\"\n};\n\nwindow['Blockly'].Blocks['__LED_UTILS_init_led_utils'] = {\n    init: function() {\n        this.jsonInit(__LED_UTILS_init_led_utils_json);\n    }\n};\n\nwindow['Blockly'].Python['__LED_UTILS_init_led_utils'] = function(block) {\n        return `g_led_utils_LEDS = {\n  0:[],1:[0],2:[0,1],3:[0,1,2],4:[0,1,2,3],\n  5:[4],6:[4,0],7:[4,0,1],8:[4,0,1,2],9:[4,0,1,2,3]\n}\ng_led_utils_KETA_BASES = {\n  0:{1:25,10:24,100:23,1000:22,10000:21},\n  1:{1:25,10:23,100:22,1000:21}\n}\ndef g_show_led_val(val, show_type, show_keta):\n  n = int(val)\n  base10 = 1\n  for pos in range(show_keta):\n    digit = n % 10\n    for delta in g_led_utils_LEDS[digit]:\n      idx = g_led_utils_KETA_BASES[show_type][base10] - 5 * delta\n      rgb.setColor(idx, 0xff0000)\n    n = int(n / 10)\n    base10 = base10 * 10\n  if show_type == 1:\n    rgb.setColor(24, 0x00ff00)\n` + \"\\n\";\n};\n\n// Block __LED_UTILS_show_led_float_1\nvar __LED_UTILS_show_led_float_1_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"show_led_float_1\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"show_led_float_1\"\n        }\n    ],\n    \"colour\": \"#24ff50\"\n};\n\nwindow['Blockly'].Blocks['__LED_UTILS_show_led_float_1'] = {\n    init: function() {\n        this.jsonInit(__LED_UTILS_show_led_float_1_json);\n    }\n};\n\nwindow['Blockly'].Python['__LED_UTILS_show_led_float_1'] = function(block) {\n    var show_led_float_1 = Blockly.Python.valueToCode(block, 'show_led_float_1', Blockly.Python.ORDER_NONE);\n    return `g_show_led_val(${show_led_float_1} * 10, 1, 4)\n` + \"\\n\";\n};\n\n// Block __LED_UTILS_show_led_int\nvar __LED_UTILS_show_led_int_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"show_led_int\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"show_led_int\"\n        }\n    ],\n    \"colour\": \"#24ff50\"\n};\n\nwindow['Blockly'].Blocks['__LED_UTILS_show_led_int'] = {\n    init: function() {\n        this.jsonInit(__LED_UTILS_show_led_int_json);\n    }\n};\n\nwindow['Blockly'].Python['__LED_UTILS_show_led_int'] = function(block) {\n    var show_led_int = Blockly.Python.valueToCode(block, 'show_led_int', Blockly.Python.ORDER_NONE);\n    return `g_show_led_val(${show_led_int}, 0, 5)\n` + \"\\n\";\n};\n\n","code":{"init_led_utils":["window['Blockly'].Python['__LED_UTILS_init_led_utils'] = function(block) {\n        return `g_led_utils_LEDS = {\n  0:[],1:[0],2:[0,1],3:[0,1,2],4:[0,1,2,3],\n  5:[4],6:[4,0],7:[4,0,1],8:[4,0,1,2],9:[4,0,1,2,3]\n}\ng_led_utils_KETA_BASES = {\n  0:{1:25,10:24,100:23,1000:22,10000:21},\n  1:{1:25,10:23,100:22,1000:21}\n}\ndef g_show_led_val(val, show_type, show_keta):\n  n = int(val)\n  base10 = 1\n  for pos in range(show_keta):\n    digit = n % 10\n    for delta in g_led_utils_LEDS[digit]:\n      idx = g_led_utils_KETA_BASES[show_type][base10] - 5 * delta\n      rgb.setColor(idx, 0xff0000)\n    n = int(n / 10)\n    base10 = base10 * 10\n  if show_type == 1:\n    rgb.setColor(24, 0x00ff00)\n` + \"\\n\";\n};\n\n","g_led_utils_LEDS = {\n  0:[],1:[0],2:[0,1],3:[0,1,2],4:[0,1,2,3],\n  5:[4],6:[4,0],7:[4,0,1],8:[4,0,1,2],9:[4,0,1,2,3]\n}\ng_led_utils_KETA_BASES = {\n  0:{1:25,10:24,100:23,1000:22,10000:21},\n  1:{1:25,10:23,100:22,1000:21}\n}\ndef g_show_led_val(val, show_type, show_keta):\n  n = int(val)\n  base10 = 1\n  for pos in range(show_keta):\n    digit = n % 10\n    for delta in g_led_utils_LEDS[digit]:\n      idx = g_led_utils_KETA_BASES[show_type][base10] - 5 * delta\n      rgb.setColor(idx, 0xff0000)\n    n = int(n / 10)\n    base10 = base10 * 10\n  if show_type == 1:\n    rgb.setColor(24, 0x00ff00)\n"],"show_led_float_1":["window['Blockly'].Python['__LED_UTILS_show_led_float_1'] = function(block) {\n    var show_led_float_1 = Blockly.Python.valueToCode(block, 'show_led_float_1', Blockly.Python.ORDER_NONE);\n    return `g_show_led_val(${show_led_float_1} * 10, 1, 4)\n` + \"\\n\";\n};\n\n","g_show_led_val(${show_led_float_1} * 10, 1, 4)\n"],"show_led_int":["window['Blockly'].Python['__LED_UTILS_show_led_int'] = function(block) {\n    var show_led_int = Blockly.Python.valueToCode(block, 'show_led_int', Blockly.Python.ORDER_NONE);\n    return `g_show_led_val(${show_led_int}, 0, 5)\n` + \"\\n\";\n};\n\n","g_show_led_val(${show_led_int}, 0, 5)\n"]}}